services:
  # MySQL for auth service
  auth-db:
    image: mysql:8.0
    container_name: auth-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE_AUTH}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    ports:
      - "3307:3306"
    volumes:
      - auth-db-data:/var/lib/mysql
    networks:
      - app-network

  # MySQL for app service
  app-db:
    image: mysql:8.0
    container_name: app-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE_APP}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    ports:
      - "3308:3306"
    volumes:
      - app-db-data:/var/lib/mysql
    networks:
      - app-network

  # Gateway service
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    restart: unless-stopped
    volumes:
      - ./gateway:/var/www
      - /var/www/vendor
    ports:
      - "8000:80"
    depends_on:
      - auth-service
      - app-service
    networks:
      - app-network

  # Auth service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      - DB_HOST=auth-db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE_AUTH}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - ./auth-service:/var/www
      - /var/www/vendor
    depends_on:
      - auth-db
    networks:
      - app-network

  # App service
  app-service:
    build:
      context: ./app-service
      dockerfile: Dockerfile
    container_name: app-service
    restart: unless-stopped
    environment:
      - DB_HOST=app-db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE_APP}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - ./app-service:/var/www
      - /var/www/vendor
    depends_on:
      - app-db
    networks:
      - app-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - gateway
    networks:
      - app-network

volumes:
  auth-db-data:
  app-db-data:

networks:
  app-network:
    driver: bridge
